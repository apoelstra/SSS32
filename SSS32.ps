%!PS-Adobe-2.0
(SSS32)
(revision alpha-3.2)
[
(MIT License)
()
(Copyright (c) 2020 Blockstream)
()
(Permission is hereby granted, free of charge, to any person obtaining a copy)
(of this software and associated documentation files (the "Software"), to deal)
(in the Software without restriction, including without limitation the rights)
(to use, copy, modify, merge, publish, distribute, sublicense, and/or sell)
(copies of the Software, and to permit persons to whom the Software is)
(furnished to do so, subject to the following conditions:)
()
(The above copyright notice and this permission notice shall be included in all)
(copies or substantial portions of the Software.)
()
(THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR)
(IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,)
(FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE)
(AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER)
(LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,)
(OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE)
(SOFTWARE.)
]
[
(WARNING: Seriously, this is a work in progress, and it is only a concept right now.)
(If you try to use this for your valuable data, I promise you will lose your data.)
(You will lose this document and come back here only to find that I have made incompatible changes,)
(and your data is lost forever. Even if you don't lose this document, there is no warranty or)
(guarantee of any kind that you will be able to recover successfully recover your data.)
()
(MATERIALS: Scissors, X-Acto knife, brass fasteners)
()
(CONSTRUCTION:)
(The bottom discs are the discs with a small circle in the center of them.)
(The top discs are the discs with a small cross in the centre. All the top discs are identical. Cut out each disc.)
(Cut out the small centre circle in each the bottom discs. Cut out each of the 32 squares of each top disc.)
(Cut a slit along one one of the small lines of the cross in each of the top discs.)
(Pass the brass fastener through a top disc and bottom disc.)
(Fold the legs of the fastener apart to secure the top and bottom discs together.)
(The two discs should now be able to rotate about their common centre.)
(Note: the "Make Share" discs are experimental and are not needed if you will be using the lookup tables.)
()
(CREATING SHARES:)
(How to construct a 2-of-n (Shamir's) Secret Sharing Scheme for splitting secret data encoded in the Bech32 alphabet.)
(For this document n cannot exceed 31.)
(It is strongly advised that the secret data contain a strong error correcting code to allow robust recovery.)
(Write out the secret share.  We will name this the S share.)
(Generate a random share of the same length.  We will name this the A share. To generate a random character)
(you can use 1d8 and 1d4 or use two distinct d6s and look up a character from the dice tables.)
(If you use d6s, you will have to re-roll if the entry is blank.)
(To generate other shares, turn to the table on the page of the first letter of your S share.)
(Find the row that corresponds to the first letter of your A share.)
(The first column tells you the first letter of the C share; the second column tells you the first letter of the D share.)
(Use as many columns as shares you need.)
(Repeat this process for every pair of letters of from your A and S shares.)
(Securely store your A share, C share, D share, and so forth, labeling the shares with their share name.)
(Securely dispose your S share and worksheets.)
()
(SECRET RECOVERY:)
(Find 2 of your secured shares.)
(Find the pair of the share names you have in the Recovery Table to find their two associated recovery symbols.)
(Translate each share, character by character, by setting the Recovery disc's dial to the associated symbol found above.)
(Add the two translated shares, character by character, using the Addition disc. The result is your secret share S.)
]
/README exch def
/MIT exch def
/ver exch def
/name exch def

/pgsize {612 792} def % letter size
/code (QPZRY9X8GF2TVDW0S3JN54KHCE6MUA7L ) def
/code2 (cj\245y*q\252hxnav\250l\251\300wbpudgrokmet\247izs ) def
% /code2 (\300abcdefghijklmnopqrstuvwxyz\247\250\251\252\245) def
/perm [29 24 13 25 9 8 23 18 22 31 27 19 1 0 3 16 11 28 12 14 6 4 2 15 10 17 21 20 26 30 7 5 ] def
/permS [16 29 24 13 25 9 8 23 18 22 31 27 19 1 0 3 11 28 12 14 6 4 2 15 10 17 21 20 26 30 7 5 ] def
% Generator for GF(32) is alpha^5 = alpha^3 + 1

/gf32add % x y -> x [+] y where [+] is addition in GF32.
         % returns 32 if x or y is out of range.
         % Note that x [+] y = x [-] y in GF32.
{               % x y
 2 copy 32 ge   % x y x (y >= 32)
 exch 32 ge or  % x y (y >= 32 || x >= 32)
 {pop pop 32}     % 32
 {xor}            % x [+] y
 ifelse         % if (y >= 32 || x >= 32) then 32 else (x [+] y)
} bind def

/gf32mulalpha % x -> x [*] alpha where [*] is multiplicaiton in GF32 and alpha is represted by 0b00010.
{               % x
 2 mul          % 2*x
 dup 32 ge      % 2*x (2*x >= 0b100000)
 { 41 xor }       % 2*x `xor` 0b101001
 if             % if (2*x >= 0xb100000) then 2*x `xor` 0x0b101001 else 2*x
} bind def

/gf32mul % x y -> x [*] y where [*] is multiplication in GF32.
         % returns 32 if x or y is out of range.
{                % x y
 10 dict begin
 { /y /x } {exch def} forall
 x 32 ge y 32 ge or  % (y >= 32 || x >= 32)
 {32}                  % 32
 {
   /xShift x def
   /yAlpha y def
   0                   % 0
   5 {                                % ((x & 0b001..1) [*] y) (x >> i) (y [*] alpha[^i])
     xShift 1 and yAlpha mul xor      % ((x & 0b001..1) [*] y [+] ((x >> i) & 1) * (y [*] alpha [^i]))
     /xShift xShift -1 bitshift def
     /yAlpha yAlpha gf32mulalpha def
   } repeat            % ((x & 0b11111) [*] y)
 } ifelse            % if (y >= 32 || x >= 32) then 32 else (x [*] y)
 end
} bind def

/gf32inv % x -> x [^-1] where [^-1] is the inverse operation in GF32.
         % returns 0 when given 0.
         % returns 32 if x is out of range.
{                        % x
 dup dup gf32mul         % x x[^2]
 dup gf32mul gf32mul     % x[^5]
 dup dup gf32mul gf32mul % x[^15]
 dup gf32mul             % x[^30]
                         % x[^-1]
} bind def

/lagrange % x xj [x[0] .. x[k]] -> l[j](x)
          % returns the lagrange basis polynomial l[j] evaluated at x for interpolation of coordinates [x[0] .. x[k]].
          % Requires xj `elem` [x[0] ... x[k]]
{               % x xj [x[0] .. x[k]]
 10 dict begin
 { /xs /xj /x } {exch def} forall
 1 xs           % 1 [x[0] .. x[k]]
 {                % let P = product [(x [-] x[m]) [/] (xj [-] x[m]) | m <- [0..i-1], x[m] /= xj]
                  % P x[i]
   /xi exch def   % P
   xi xj xor      % P (xj [-] x[i])
   dup 0 eq       % P (xj [-] x[i]) (xj [-] x[i] == 0)
   { pop }             % P
   { gf32inv gf32mul   % (P [/] (xj [-] x[i])
     xi x xor gf32mul  % (P [*] (x [-] x[i]) [/] (xj [-] x[i]))
   }
   ifelse         % (if xj == x[i] then P else (P [*] (x [-] x[i]) [/] (xj [-] x[i]))
 } forall       % x xj (product [(x [-] x[m]) [/] (xj [-] x[m]) | m <- [0..k], x[m] /= xj])
 end
} bind def

/makeShare % sS sA i -> si
       { 3 2 roll 1 index permS 0 get permS 0 2 getinterval lagrange gf32mul
         3 1 roll permS 1 get permS 0 2 getinterval lagrange gf32mul
         xor
       } bind def

/gf32mularray % x b -> x * b
  { [ 3 1 roll { 1 index gf32mul exch } forall pop ]
  } bind def

/gf32addarray % a b -> a + b pointwise
  { [ 3 1 roll 0 1 2 index length 1 sub { 2 index 1 index get 2 index 2 index get gf32add exch pop 3 1 roll } for pop pop ]
  } bind def

% /polymodulus [18 29 21 20 22 29] def % coefficents from c0 to c5
/polymodulus [10 30 14 26 0 17 28 18 18 5 26 6 22] def % coefficents from c12 to c0
/checksum {[polymodulus length 1 sub {0} repeat 1]} bind def
/checksumstring { polymodulus length string checksum 0 1 polymodulus length 1 sub {3 copy exch 1 index get code exch 1 getinterval putinterval pop } for pop } bind def

/polymod0 % array -> [ c5 c4 c3 c2 c1 c0 ]
 { [ polymodulus length {0} repeat ]
   exch
   { [ exch 2 index 1 polymodulus length 1 sub getinterval aload pop polymodulus length dup 1 sub roll ] exch 0 get polymodulus gf32mularray gf32addarray  } forall
 } bind def

/polymodshift2 % c7 c6 -> [ c5 c4 c3 c2 c1 c0 ]
 {  [ 3 1 roll polymodulus length {0} repeat ] polymod0
 } bind def

/polymodhrp % string -> [ c5 c4 c3 c2 c1 c0 ]
 {
   [ exch 1 exch dup { 32 idiv exch } forall 0 exch { 31 and } forall ] polymod0
 } bind def

/centreshow {dup stringwidth pop 2 div neg 0 rmoveto show} bind def
/centresquare {dup neg 2 div dup rmoveto dup 0 rlineto dup 0 exch rlineto neg 0 rlineto closepath stroke} bind def
/concatstrings % (a) (b) -> (ab)
   { exch dup length
     2 index length add string
     dup dup 4 2 roll copy length
     4 -1 roll putinterval
   } bind def

% From BLUEBOOK Program #10
/outsidecircletext
  { circtextdict begin
      /radius exch def
      /centerangle exch def
      /ptsize exch def
      /str exch def
      /xradius radius ptsize 4 div add def

      gsave
        centerangle str findhalfangle add rotate

        str
          { /charcode exch def
            ( ) dup 0 charcode put outsideplacechar
          } forall
      grestore
    end
  } def

/insidecircletext
{ circtextdict begin
  /radius exch def /centerangle exch def
  /ptsize exch def /str exch def
  /xradius radius ptsize 3 div sub def
  gsave
   centerangle str findhalfangle sub rotate
   str
    { /charcode exch def
      ( ) dup 0 charcode put insideplacechar
    } forall
  grestore
  end
} def

/circtextdict 16 dict def
circtextdict begin
 /findhalfangle
  { stringwidth pop 2 div
    2 xradius mul pi mul div 360 mul
  } def

/outsideplacechar
    { /char exch def
      /halfangle char findhalfangle def
      gsave
        halfangle neg rotate
        radius 0 translate
        -90 rotate
        char stringwidth pop 2 div neg 0 moveto
        char show
      grestore
      halfangle 2 mul neg rotate
    } def

/insideplacechar
 { /char exch def
   /halfangle char findhalfangle def
   gsave
    halfangle rotate
    radius 0 translate
    90 rotate
    char stringwidth pop 2 div neg 0 moveto
    char show
   grestore
   halfangle 2 mul rotate
 } def

/pi 3.1415923 def
end

/showBottomWheelPage
 {
   /title exch def
   /binop exch def
   pgsize 2 div exch 2 div exch translate
   newpath 0 0 6 40 mul 0 360 arc stroke
   newpath 0 0 6 40 mul 28 add 0 360 arc stroke
   newpath 0 0 6 0 360 arc stroke
   /Helvetica findfont 12 scalefont setfont
   title 12 270 30 insidecircletext
   /Helvetica findfont 6 scalefont setfont
   0 30 360 {title 6 2 index 262 outsidecircletext} for
   outerfont findfont 18 scalefont setfont
   perm {0 38 sqrt 40 mul moveto outercode exch 1 getinterval centreshow -11.25 rotate} forall
   /Courier findfont 12 scalefont setfont
   180 rotate
   0 1 31 {139 rotate perm {0 2 index 2 add sqrt 40 mul moveto 1 index 31 exch sub perm exch get binop code exch 1 getinterval centreshow -11.25 rotate} forall pop} for
   showpage
 } bind def

/showTopWheelPage
 {
   pgsize 2 div exch 2 div exch translate
   0.8 setgray
   newpath 0 0 7.25 40 mul 140 40 arc fill
   1 setgray
   newpath 0 0 6 40 mul 0 360 arc fill
   0 setgray
   newpath 0 0 6 40 mul 0 360 arc stroke
   newpath 0 6 moveto 0 -6 lineto stroke
   newpath 6 0 moveto -6 0 lineto stroke
   newpath 0 6 40 mul moveto 10 -20 rlineto -20 0 rlineto closepath fill
   /Courier findfont 12 scalefont setfont
   180 rotate
   0 1 31 {139 rotate dup 2 add sqrt 40 mul 2.5 add newpath 0 exch 2 copy moveto 12 centresquare moveto 9 -3 rmoveto (\254) /Symbol findfont 12 scalefont setfont show
            31 exch sub perm exch get code exch 1 getinterval /Courier findfont 12 scalefont setfont show} for
   showpage
 } bind def

/showShareTable {
/offsety exch def
/offsetx exch def
/page exch def
/Courier findfont 10 scalefont setfont
20 offsetx add offsety moveto (Page: ) show
/Courier-Bold findfont 8 scalefont setfont
code page 1 getinterval show
2 1 31 {
dup 7 mul offsetx add offsety 10 sub moveto
permS exch get
code exch 1 getinterval show
} for

0 1 31 {
/Courier-Bold findfont 8 scalefont setfont
offsetx offsety 20 sub 2 index 8 mul sub moveto
dup code exch perm exch get 1 getinterval show
/Courier findfont 8 scalefont setfont
2 1 31 {
dup 7 mul offsetx add offsety 20 sub 3 index 8 mul sub moveto
permS exch get
page exch perm 3 index get exch  makeShare code exch 1 getinterval show
} for pop } for
} bind def

/showShareTablePage {
325 400 showShareTable
50 400 showShareTable
325 720 showShareTable
50 720 showShareTable
showpage
} bind def

/arraySpace 13 def
/arrayHeight 16 def
/showArray {
  { 3 copy pop moveto code exch 1 getinterval show exch arraySpace add exch } forall pop pop
} bind def

%%Pages: 22
%%Page: 1 1
/Helvetica findfont 6 scalefont setfont
40 750 moveto
MIT {gsave show grestore 0 -8 rmoveto} forall
/Helvetica findfont 20 scalefont setfont
0 -22 rmoveto
gsave name show grestore 0 -12 rmoveto
/Helvetica findfont 10 scalefont setfont
gsave ver show grestore 0 -24 rmoveto
README {gsave show grestore 0 -12 rmoveto} forall
showpage

%%Page: 2 2

%cat <<EOF | tbl | groff -Tps
%Dice Tables
%
%1d4;1d8
%.TS
%box;
%cFCW || cFCW | cFCW | cFCW | cFCW | cFCW | cFCW | cFCW | cFCW.
%        1       2       3       4       5       6       7       8
%=
%1       Q       P       Z       R       Y       9       X       8
%_
%2       G       F       2       T       V       D       W       0
%_
%3       S       3       J       N       5       4       K       H
%_
%4       C       E       6       M       U       A       7       L
%.TE
%
%2d6
%.TS
%box;
%cFCW || cFCW | cFCW | cFCW | cFCW | cFCW | cFCW.
%        1       2       3       4       5       6
%=
%1               Q       P       Z       9
%_
%2       Y       9       X       8       G       F
%_
%3       2       T       V       D       W       0
%_
%4       S       3       J       N       5       4
%_
%5       K       H       C       E       6       M
%_
%6               U       A       7       L
%.TE
%EOF
/SC 32 def
/E{0 rmoveto show}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Cg/setgray load def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/LW/setlinewidth load def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/BP{
1 setlinecap
1 setlinejoin
0 792 translate
1 -1 scale
}bind def
/EP{
showpage
}def
BP

/F0 10/Courier SF(Dice T)72 12 Q(ables)-.8 E(1d4;1d8)72 36 Q .4 LW
256 40.5 72 40.5 DL/F1 10/Courier SF 15(12345678)98 50 S 256 54.5 72
54.5 DL 256 56.5 72 56.5 DL 15(1QPZRY9X8)77 66 S 256 70.5 72 70.5 DL 15
(2GF2TVDW0)77 80 S 256 84.5 72 84.5 DL 15(3S3JN54KH)77 94 S 256 98.5 72
98.5 DL 15(4CE6MUA7L)77 108 S 256 112.5 72 112.5 DL 237.5 40.5 237.5
112.5 DL 216.5 40.5 216.5 112.5 DL 195.5 40.5 195.5 112.5 DL 174.5 40.5
174.5 112.5 DL 153.5 40.5 153.5 112.5 DL 132.5 40.5 132.5 112.5 DL 111.5
40.5 111.5 112.5 DL 89.5 40.5 89.5 112.5 DL 91.5 40.5 91.5 112.5 DL 256
40.5 256 112.5 DL 72 40.5 72 112.5 DL F0(2d6)72 132 Q 214 136.5 72 136.5
DL F1 15(123456)98 146 S 214 150.5 72 150.5 DL 214 152.5 72 152.5 DL 36
(1Q)77 162 S 15(PZ9)-21 G 214 166.5 72 166.5 DL 15(2Y9X8GF)77 176 S 214
180.5 72 180.5 DL 15(32TVDW0)77 190 S 214 194.5 72 194.5 DL 15(4S3JN54)
77 204 S 214 208.5 72 208.5 DL 15(5KHCE6M)77 218 S 214 222.5 72 222.5 DL
36(6U)77 232 S 15(A7L)-21 G 214 236.5 72 236.5 DL 195.5 136.5 195.5
236.5 DL 174.5 136.5 174.5 236.5 DL 153.5 136.5 153.5 236.5 DL 132.5
136.5 132.5 236.5 DL 111.5 136.5 111.5 236.5 DL 89.5 136.5 89.5 236.5 DL
91.5 136.5 91.5 236.5 DL 214 136.5 214 236.5 DL 72 136.5 72 236.5 DL

/row12 code2 0 1 [1 2] lagrange 1 getinterval code2 0 2 [1 2] lagrange 1 getinterval concatstrings def
/row13 code2 0 1 [1 3] lagrange 1 getinterval code2 0 3 [1 3] lagrange 1 getinterval concatstrings def
/row23 code2 0 2 [2 3] lagrange 1 getinterval code2 0 3 [2 3] lagrange 1 getinterval concatstrings def

(Recovery Table) 29 256 Q
2 1 31 { 1 1 2 index 1 sub { 1 index exch
dup 19 mul 10 add 2 index 12 mul 244 add moveto
/F0 5/Courier SF
code 2 index permS exch get 1 getinterval code 2 index permS exch get 1 getinterval concatstrings (:) concatstrings show
dup 19 mul 10 9 add add 2 index 12 mul 244 add moveto
permS exch get exch permS exch get exch
/F0 5/Symbol SF
[ 3 1 roll ] dup permS 0 get exch dup 0 get exch lagrange code2 exch 1 getinterval ( ) exch concatstrings
            exch permS 0 get exch dup 1 get exch lagrange code2 exch 1 getinterval concatstrings show
} for pop } for

0 Cg EP

%%Page: 3 3
% note 0 and 1 (aka chi and phi) are never used, so they could be removed from the wheel, freeing up character space.
/outerfont /Symbol def
/outercode code2 def
{gf32mul} (Recovery Disc) showBottomWheelPage

%%Page: 4 4
/outerfont /Courier def
/outercode code def
{xor} (Addition) showBottomWheelPage

%%Page: 5 5
29 24 13 25 showShareTablePage

%%Page: 6 6
9 8 23 18 showShareTablePage

%%Page: 7 7
22 31 27 19 showShareTablePage

%%Page: 8 8
1 0 3 16 showShareTablePage

%%Page: 9 9
11 28 12 14 showShareTablePage

%%Page: 10 10
6 4 2 15 showShareTablePage

%%Page: 11 11
10 17 21 20 showShareTablePage

%%Page: 12 12
26 30 7 5 showShareTablePage

%%Page: 13 13
/outerfont /Courier def
/outercode code def
{24 makeShare} (Make Share ) code 24 1 getinterval concatstrings showBottomWheelPage

%%Page: 14 14
/outerfont /Courier def
/outercode code def
{13 makeShare} (Make Share ) code 13 1 getinterval concatstrings showBottomWheelPage

%%Page: 15 15
showTopWheelPage

%%Page: 16 16
showTopWheelPage

%%Page: 17 17
showTopWheelPage

%%Page: 18 18
showTopWheelPage

%%Page: 19 19
90 rotate
0 -792 translate
/Helvetica-bold findfont 10 scalefont setfont
%pgsize 40 sub exch 2 div exch
pgsize 2 div exch 130 add
moveto (Bech32 Checksum Table) centreshow

0 1 15 {
    0 1 31 {
        /yidx exch def
        /xidx exch def

        yidx 2 mod 0 eq {0.6} {0} ifelse setgray

        % Position for bold letters
        xidx 8 mod 90 mul 30 add
        730 yidx 7.5 mul sub xidx 8 idiv 270 mul sub
        moveto

        2 string % Allocate a new string
        % Each of these dups creates a new pointer to the above string
        dup 1 code perm yidx get get put
        dup 0 code perm xidx get get put
        /Courier-Bold findfont 8.5 scalefont setfont
        show

        % Display checksum
        3 0 rmoveto

        xidx yidx
        polymodulus length string
        % Compute "checksum table" entry which is checksum of AB00...00
        perm xidx get perm yidx get polymodshift2
        % Draw it
        0 1 polymodulus length 1 sub {
            3 copy get code exch get 3 2 roll exch put
        } for
        pop
        /Courier findfont 8.5 scalefont setfont
        show
        pop
    } for
    pop
} for
showpage

%%Page: 20 20
90 rotate
0 -792 translate
/Helvetica-bold findfont 10 scalefont setfont
pgsize 2 div exch 130 add
moveto (Bech32 Checksum Table) centreshow

16 1 31 {
    0 1 31 {
        /yidx exch def
        /xidx exch def

        yidx 2 mod 0 eq {0.6} {0} ifelse setgray

        % Position for bold letters
        xidx 16 sub 8 mod 90 mul 30 add
        730 yidx 7.5 mul sub xidx 16 sub 8 idiv 270 mul sub
        moveto

        2 string % Allocate a new string
        % Each of these dups creates a new pointer to the above string
        dup 1 code perm yidx get get put
        dup 0 code perm xidx get get put
        /Courier-Bold findfont 8.5 scalefont setfont
        show

        % Display checksum
        3 0 rmoveto

        xidx yidx
        polymodulus length string
        % Compute "checksum table" entry which is checksum of AB00...00
        perm xidx get perm yidx get polymodshift2
        % Draw it
        0 1 polymodulus length 1 sub {
            3 copy get code exch get 3 2 roll exch put
        } for
        pop
        /Courier findfont 8.5 scalefont setfont
        show
        pop
    } for
    pop
} for
showpage

%%Page: 21 21
/Helvetica-Bold findfont 10 scalefont setfont
pgsize 40 sub exch 2 div exch
moveto (Bech32 Checksum Worksheet for donotusesss32 Prefix) centreshow

/Courier findfont arraySpace scalefont setfont

80 700
0 1 21 {
3 copy pop
0 1 4 index 2 mod 0 eq {polymodulus length 1 add} {polymodulus length 1 sub} ifelse {
3 copy pop
moveto
-0.5 -1.9 rmoveto
0 arrayHeight rlineto
arraySpace 0 rlineto
0 arrayHeight neg rlineto
closepath
dup polymodulus length lt {0.2} {1} ifelse setlinewidth
pop
stroke
exch arraySpace add exch
} for
pop pop
2 mod 0 eq
 { arrayHeight sub exch arraySpace 2 mul add exch}
 {
 2 copy moveto -0.5 -1.9 rmoveto arraySpace polymodulus length mul 0 rlineto 1 setlinewidth stroke
 arrayHeight sub
 } ifelse
} for
2 copy
polymodulus length {
2 copy
moveto
-0.5 -1.9 rmoveto
0 arrayHeight rlineto
arraySpace 0 rlineto
0 arrayHeight neg rlineto
closepath
0.25 setlinewidth
stroke
exch arraySpace add exch
} repeat
pop pop

80 700
(donotusesss32) polymodhrp
0 2 38 {
    /arrayIdx exch def
    /polymod exch def
    /y exch def
    /x exch def

    % Show summand
    x y [ polymod aload pop 32 32 ] showArray

    % Show next checksum-table lookup
    x arraySpace 2 mul add
    y arrayHeight sub
    polymod 0 2 getinterval aload pop polymodshift2 showArray

    x arraySpace 2 mul add
    y arrayHeight 2 mul sub

    polymod 0 2 getinterval aload pop polymodshift2
    [ polymod 2 polymodulus length 2 sub getinterval aload pop 32 32 ]
    gf32addarray
} for
showArray

370 347
13 {
    /y exch def
    /x exch def
    x y moveto
    1 0 rmoveto    % 2 0
    3 0 rlineto    % 4 0
    -1 -5 rlineto   % 4 -5
    2 0 rlineto    % 6 0
    -3 -3 rlineto  % 3 -8
    -3 3 rlineto   % 0 -5
    2 0 rlineto    % 2 -5
    -1 5 rlineto    % 2 0
    closepath
    fill

    x arraySpace add y
} repeat

85 421
13 {
    /y exch def
    /x exch def
    x y moveto
    1 0 rmoveto    % 2 0
    3 0 rlineto    % 4 0
    -1 -5 rlineto   % 4 -5
    2 0 rlineto    % 6 0
    -3 -3 rlineto  % 3 -8
    -3 3 rlineto   % 0 -5
    2 0 rlineto    % 2 -5
    -1 5 rlineto    % 2 0
    closepath
    fill

    x arraySpace add y
} repeat


%% second table
80 400
0 1 21 {
3 copy pop
0 1 4 index 2 mod 0 eq {polymodulus length 1 add} {polymodulus length 1 sub} ifelse {
3 copy pop
moveto
-0.5 -1.9 rmoveto
0 arrayHeight rlineto
arraySpace 0 rlineto
0 arrayHeight neg rlineto
closepath
dup polymodulus length lt {0.2} {1} ifelse setlinewidth
3 index dup 2 mod 0 eq 3 1 roll add 22 ge and { gsave 1 0.9 0.9 setrgbcolor fill grestore } if
stroke
exch arraySpace add exch
} for
pop pop
2 mod 0 eq
 { arrayHeight sub exch arraySpace 2 mul add exch}
 {
 2 copy moveto -0.5 -1.9 rmoveto arraySpace polymodulus length mul 0 rlineto 1 setlinewidth stroke
 arrayHeight sub
 } ifelse
} for
2 copy
polymodulus length {
2 copy
moveto
-0.5 -1.9 rmoveto
0 arrayHeight rlineto
arraySpace 0 rlineto
0 arrayHeight neg rlineto
closepath
0.25 setlinewidth
stroke
exch arraySpace add exch
} repeat
pop pop
0.85 setgray
checksum showArray

showpage

%%Page: 22 22
/Helvetica-Bold findfont 10 scalefont setfont
pgsize 40 sub exch 2 div exch
moveto (Bech32 Checksum Worksheet for donotusesss32 Prefix) centreshow

0 setgray

40 600
0 1 27 {
3 copy pop
0 1 4 index 2 mod 0 eq {polymodulus length 1 add} {polymodulus length 1 sub} ifelse {
3 copy pop
moveto
-0.5 -1.9 rmoveto
0 arrayHeight rlineto
arraySpace 0 rlineto
0 arrayHeight neg rlineto
closepath
dup polymodulus length lt {0.2} {1} ifelse setlinewidth
pop
stroke
exch arraySpace add exch
} for
pop pop
2 mod 0 eq
 { arrayHeight sub exch arraySpace 2 mul add exch}
 {
 2 copy moveto -0.5 -1.9 rmoveto arraySpace polymodulus length mul 0 rlineto 1 setlinewidth stroke
 arrayHeight sub
 } ifelse
} for
2 copy
polymodulus length {
2 copy
moveto
-0.5 -1.9 rmoveto
0 arrayHeight rlineto
arraySpace 0 rlineto
0 arrayHeight neg rlineto
closepath
0.25 setlinewidth
stroke
exch arraySpace add exch
} repeat
pop pop

44 621
13 {
    /y exch def
    /x exch def
    x y moveto
    1 0 rmoveto    % 2 0
    3 0 rlineto    % 4 0
    -1 -5 rlineto   % 4 -5
    2 0 rlineto    % 6 0
    -3 -3 rlineto  % 3 -8
    -3 3 rlineto   % 0 -5
    2 0 rlineto    % 2 -5
    -1 5 rlineto    % 2 0
    closepath
    fill

    x arraySpace add y
} repeat

408 151
13 {
    /y exch def
    /x exch def
    x y moveto
    1 0 rmoveto    % 2 0
    3 0 rlineto    % 4 0
    -1 -5 rlineto   % 4 -5
    2 0 rlineto    % 6 0
    -3 -3 rlineto  % 3 -8
    -3 3 rlineto   % 0 -5
    2 0 rlineto    % 2 -5
    -1 5 rlineto    % 2 0
    closepath
    fill

    x arraySpace add y
} repeat

showpage
